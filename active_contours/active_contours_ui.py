# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'active_contours.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import os
import re
import threading

import numpy as np
from PIL import Image
from PyQt5 import QtCore, QtGui, QtWidgets
from PIL.ImageQt import ImageQt
from ac_program import initialize, process_frame, process_video

class Ui_MainWindow(object):

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(850, 573)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.currentImage = QtWidgets.QLabel(self.centralwidget)
        self.currentImage.setGeometry(QtCore.QRect(320, 30, 471, 371))
        self.currentImage.setStyleSheet("border-color: rgb(0, 0, 0);")
        self.currentImage.setText("")
        self.currentImage.setPixmap(QtGui.QPixmap("active_contours/default.jpg"))
        self.currentImage.setScaledContents(True)
        self.currentImage.setObjectName("currentImage")
        self.chooseImageButton = QtWidgets.QPushButton(self.centralwidget)
        self.chooseImageButton.setGeometry(QtCore.QRect(40, 30, 111, 25))
        self.chooseImageButton.setStyleSheet("background-color: rgb(135, 223, 232);")
        self.chooseImageButton.setObjectName("chooseImageButton")
        self.epsilonInput = QtWidgets.QTextEdit(self.centralwidget)
        self.epsilonInput.setGeometry(QtCore.QRect(40, 100, 191, 31))
        self.epsilonInput.setObjectName("epsilonInput")
        self.epsilonLabel = QtWidgets.QLabel(self.centralwidget)
        self.epsilonLabel.setGeometry(QtCore.QRect(40, 70, 67, 17))
        self.epsilonLabel.setObjectName("epsilonLabel")
        self.averagePixelLabel = QtWidgets.QLabel(self.centralwidget)
        self.averagePixelLabel.setGeometry(QtCore.QRect(40, 310, 131, 17))
        self.averagePixelLabel.setObjectName("averagePixelLabel")
        self.averagePixelInput = QtWidgets.QTextEdit(self.centralwidget)
        self.averagePixelInput.setGeometry(QtCore.QRect(40, 340, 191, 61))
        self.averagePixelInput.setStyleSheet("background-color: rgb(211, 215, 207);")
        self.averagePixelInput.setObjectName("averagePixelInput")
        self.processingTimeInput = QtWidgets.QTextEdit(self.centralwidget)
        self.processingTimeInput.setGeometry(QtCore.QRect(40, 440, 191, 31))
        self.processingTimeInput.setStyleSheet("background-color: rgb(211, 215, 207);")
        self.processingTimeInput.setObjectName("processingTimeInput")
        self.processingTimeLabel = QtWidgets.QLabel(self.centralwidget)
        self.processingTimeLabel.setGeometry(QtCore.QRect(40, 410, 131, 17))
        self.processingTimeLabel.setObjectName("processingTimeLabel")
        self.initProgramButton = QtWidgets.QPushButton(self.centralwidget)
        self.initProgramButton.setGeometry(QtCore.QRect(40, 260, 141, 25))
        self.initProgramButton.setStyleSheet("background-color: rgb(250, 176, 243);")
        self.initProgramButton.setObjectName("initProgramButton")
        self.fullCheckBox = QtWidgets.QCheckBox(self.centralwidget)
        self.fullCheckBox.setGeometry(QtCore.QRect(40, 220, 92, 23))
        self.fullCheckBox.setObjectName("fullCheckBox")
        self.chooseVideoButton = QtWidgets.QPushButton(self.centralwidget)
        self.chooseVideoButton.setGeometry(QtCore.QRect(160, 30, 111, 25))
        self.chooseVideoButton.setStyleSheet("background-color: rgb(135, 223, 232);")
        self.chooseVideoButton.setObjectName("chooseVideoButton")
        self.iterationsInput = QtWidgets.QTextEdit(self.centralwidget)
        self.iterationsInput.setGeometry(QtCore.QRect(40, 170, 191, 31))
        self.iterationsInput.setObjectName("iterationsInput")
        self.iterationsLabel = QtWidgets.QLabel(self.centralwidget)
        self.iterationsLabel.setGeometry(QtCore.QRect(40, 140, 91, 17))
        self.iterationsLabel.setObjectName("iterationsLabel")
        self.restartButton = QtWidgets.QPushButton(self.centralwidget)
        self.restartButton.setGeometry(QtCore.QRect(670, 420, 121, 25))
        self.restartButton.setStyleSheet("background-color: rgb(0, 0, 0);\n"
                                         "color: rgb(238, 238, 236);")
        self.restartButton.setObjectName("restartButton")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(40, 490, 261, 17))
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(220, 490, 261, 17))
        self.label_2.setObjectName("label_2")
        self.redButton = QtWidgets.QRadioButton(self.centralwidget)
        self.redButton.setGeometry(QtCore.QRect(320, 420, 112, 23))
        self.redButton.setObjectName("redButton")
        self.blackButton = QtWidgets.QRadioButton(self.centralwidget)
        self.blackButton.setGeometry(QtCore.QRect(390, 420, 112, 23))
        self.blackButton.setObjectName("blackButton")
        self.blueButton = QtWidgets.QRadioButton(self.centralwidget)
        self.blueButton.setGeometry(QtCore.QRect(460, 420, 112, 23))
        self.blueButton.setObjectName("blueButton")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 850, 22))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        #########
        # CUSTOM
        #########

        self.setUpDefaults()
        self.setUpFunctions()
        self.setUpTimer()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.chooseImageButton.setText(_translate("MainWindow", "Choose Image"))
        self.epsilonLabel.setText(_translate("MainWindow", "Epsilon"))
        self.averagePixelLabel.setText(_translate("MainWindow", "Average Pixel"))
        self.processingTimeLabel.setText(_translate("MainWindow", "Processing Time"))
        self.initProgramButton.setText(_translate("MainWindow", "Init Program"))
        self.fullCheckBox.setText(_translate("MainWindow", "Full"))
        self.chooseVideoButton.setText(_translate("MainWindow", "Choose Video"))
        self.iterationsLabel.setText(_translate("MainWindow", "Iterations"))
        self.restartButton.setText(_translate("MainWindow", "Restart"))
        self.label.setText(_translate("MainWindow", "Video Frame Rate: 24 FPS"))
        self.label_2.setText(_translate("MainWindow", "(0.04167 secs aprox.)"))
        self.redButton.setText(_translate("MainWindow", "Red"))
        self.blackButton.setText(_translate("MainWindow", "Black"))
        self.blueButton.setText(_translate("MainWindow", "Blue"))

    def setUpDefaults(self):
        self.video = False
        self.images = []
        self.times = []
        self.epsilonInput.setText('30')
        self.iterationsInput.setText('300')
        self.averagePixelInput.setText('')
        self.processingTimeInput.setText('')
        self.fullCheckBox.setChecked(False)
        self.redButton.setChecked(True)


    def setUpFunctions(self):
        self.restartButton.clicked.connect(self.onClickRestart)
        self.chooseImageButton.clicked.connect(self.onClickChooseImage)
        self.chooseVideoButton.clicked.connect(self.onClickChooseVideo)
        self.initProgramButton.clicked.connect(self.onClickInitProgram)

    def update_image(self):
        if self.images:
            if len(self.images) > 0:
                current_image = self.images.pop(0)
                self.currentImage.clear()
                self.currentImage.setPixmap(QtGui.QPixmap.fromImage(ImageQt(current_image)))
        if self.times:
            if len(self.times) > 0:
                self.processingTimeInput.setText(str(np.mean(self.times)))


    def setUpTimer(self):
        timer = QtCore.QTimer(self.currentImage)
        timer.timeout.connect(self.update_image)
        timer.start(100)

    def onClickRestart(self):
        self.currentImage.setPixmap(QtGui.QPixmap("default.jpg"))
        self.setUpDefaults()

    def onClickChooseImage(self):
        file, _ = QtWidgets.QFileDialog.getOpenFileName(self.centralwidget, "Choose image")
        self.filename = file

    def onClickChooseVideo(self):
        self.dir = str(QtWidgets.QFileDialog.getExistingDirectory(None, "Select Directory"))
        self.video = True
        self.filenames = os.listdir(self.dir)

        # sorts files
        self.filenames.sort(key=lambda f: int(re.sub('\D', '', f)))

    def onClickInitProgram(self):
        lin_color = (255, 0, 0) # red
        if self.blackButton.isChecked():
            lin_color = (0, 0, 0)
        elif self.blueButton.isChecked():
            lin_color = (0, 0, 255)

        if not self.video:
            average, lin, lout, mask, f, im_arr = initialize(self.filename, float(self.epsilonInput.toPlainText()))
            elapsed_time, _, _, _ = process_frame(
                lin, lout, mask, f, im_arr,
                int(self.iterationsInput.toPlainText()),
                self.images,
                lin_color=lin_color,
                full=self.fullCheckBox.isChecked()
            )
            self.averagePixelInput.setText(str(average))
            self.processingTimeInput.setText(str(elapsed_time))
        else:
            first = self.filenames[0]
            average, lin, lout, mask, f, _ = initialize(f'{self.dir}/{first}', float(self.epsilonInput.toPlainText()))
            self.averagePixelInput.setText(str(average))

            def run_parallel():
                _ = process_video(
                    self.dir,
                    self.filenames,
                    lin, lout, mask, f,
                    int(self.iterationsInput.toPlainText()),
                    self.images,
                    self.times,
                    lin_color=lin_color,
                )
            th = threading.Thread(target=run_parallel)
            th.start()


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
